name: Deploy to Docker Server

on:
  push:
    tags:
      - '*' # 当推送类似 v1.0.0 的标签时触发
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run the workflow'
        type: environment
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.environment) || 'production' }}

    outputs:
      image-tag: ${{ steps.tag.outputs.image-tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate image tag
        id: tag
        run: echo "image-tag=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: docker build --build-arg NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }} --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }} -t hothub:${{ steps.tag.outputs.image-tag }} .

      - name: Save image
        run: docker save -o hothub.tar hothub:${{ steps.tag.outputs.image-tag }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: hothub.tar

  transfer:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Transfer image to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: 'hothub.tar'
          target: '/tmp/'

  deploy:
    needs: [build, transfer]
    runs-on: ubuntu-latest
    environment: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.environment) || 'production' }} # Or your appropriate environment logic
    steps:
      - name: Deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }} # Consider using SSH keys for better security
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            # 1. Define the new image name and tag from build job output
            # The 'image-tag' is generated in your 'build' job.
            NEW_IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
            if [ -z "$NEW_IMAGE_TAG" ]; then
              echo "Error: Failed to get image-tag from build job output."
              exit 1
            fi
            NEW_IMAGE_FULL_NAME="hothub:$NEW_IMAGE_TAG"
            echo "New image to deploy: $NEW_IMAGE_FULL_NAME"

            # 2. Load the new Docker image from the tarball
            echo "Loading image $NEW_IMAGE_FULL_NAME from /tmp/hothub.tar..."
            docker load -i /tmp/hothub.tar

            # 3. Verify the loaded image exists and get its ID
            # Use head -n 1 in case the tar contains multiple tags for the same image ID,
            # or if somehow multiple images match (though with specific tag this should be unique)
            NEW_IMAGE_ID=$(docker images --filter=reference="$NEW_IMAGE_FULL_NAME" --format "{{.ID}}" | head -n 1)
            if [ -z "$NEW_IMAGE_ID" ]; then
              echo "Error: Failed to find ID for image $NEW_IMAGE_FULL_NAME after load."
              echo "Listing all hothub images:"
              docker images --filter=reference='hothub*'
              echo "Listing all images on system:"
              docker images
              exit 1 # Exit if the new image ID wasn't found, something is wrong.
            fi
            echo "ID of the new image to keep: $NEW_IMAGE_ID (Name: $NEW_IMAGE_FULL_NAME)"

            # 4. Stop and remove the currently running container (if any)
            # This frees up the image it was using, allowing it to be deleted if it's an old version.
            echo "Stopping and removing existing hothub container..."
            docker stop hothub || echo "Container 'hothub' was not running or already stopped."
            docker rm hothub || echo "Container 'hothub' was not found or already removed."

            # 5. Clean up old 'hothub' images
            # We want to delete all images with repository 'hothub' EXCEPT the one we just loaded (NEW_IMAGE_ID)
            echo "Cleaning up old 'hothub' images (excluding $NEW_IMAGE_FULL_NAME with ID $NEW_IMAGE_ID)..."
            ALL_HOTHUB_IMAGE_IDS=$(docker images --filter=reference='hothub' --format "{{.ID}}")
            REMOVED_COUNT=0
            SKIPPED_COUNT=0

            for IMAGE_ID_TO_CHECK in $ALL_HOTHUB_IMAGE_IDS; do
              if [ "$IMAGE_ID_TO_CHECK" != "$NEW_IMAGE_ID" ]; then
                echo "Attempting to remove old image ID: $IMAGE_ID_TO_CHECK"
                # Using -f to force remove. If other containers use this image, they'd prevent removal without -f.
                # Since we target specific 'hothub' versions, this should be relatively safe.
                docker rmi -f "$IMAGE_ID_TO_CHECK" || echo "Warning: Could not remove image ID $IMAGE_ID_TO_CHECK. It might be a base layer for another image, already removed, or in use by a non-hothub container."
                REMOVED_COUNT=$((REMOVED_COUNT + 1))
              else
                echo "Skipping removal of the new/current image ID: $IMAGE_ID_TO_CHECK ($NEW_IMAGE_FULL_NAME)"
                SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
              fi
            done
            echo "Image cleanup: $REMOVED_COUNT images targeted for removal, $SKIPPED_COUNT image (the new one) was skipped."

            # 6. Clean up any remaining dangling images (good practice)
            echo "Cleaning up all dangling images on the system..."
            docker image prune -f || echo "Docker image prune failed or no dangling images to prune."

            # 7. Run the new Docker container
            echo "Starting new hothub container with image $NEW_IMAGE_FULL_NAME..."
            docker run -d --name hothub -p 32769:3000 \
              --restart unless-stopped \
              -e NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }} \
              -e NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }} \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e DIRECT_URL=${{ secrets.DIRECT_URL }} \
              -e OPEN_API_JWT_SECRET=${{ secrets.OPEN_API_JWT_SECRET }} \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              -e OPENAI_API_BASE_URL=${{ secrets.OPENAI_API_BASE_URL }} \
              -e XAI_API_KEY=${{ secrets.XAI_API_KEY }} \
              -e UNIVERSAL_API_KEY=${{ secrets.UNIVERSAL_API_KEY }} \
              -e UNIVERSAL_API_BASE_URL=${{ secrets.UNIVERSAL_API_BASE_URL }} \
              -e GLOBAL_API_KEY=${{ secrets.GLOBAL_API_KEY }} \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              "$NEW_IMAGE_FULL_NAME"

            echo "Deployment script finished successfully."
